install.packages(c("caret", "dplyr"))
library(dplyr)
install.packages("dplyr")
install.packages("caret")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
.libPaths()
install.packages(c("caret", "dplyr"))
install.packages(c("caret", "dplyr"))
.libPaths()
.libPaths("C:\myRlib")
.libPaths("C:/myRlib")
.libPaths()
.libPaths()
install.packages("caret")
choose.dir()
setwd("C:\\Users\\dydeh\\4학년2학기\\민구")
getwd()
library(dplyr)
library(sqldf)
library(ggplot2)
addr <- read('ADDR.csv')
addr
addr <- read_csv('ADDR.csv')
addr <- read.csv('ADDR.csv')
addr
addr <- read.csv('ADDR.csv', encoding = 'UTF-8')
addr <- read.csv('ADDR.csv', fileEncoding = "euc-kr")
addr
str(addr)
addr
addr <- read.csv('ADDR.csv', header = TfileEncoding = "euc-kr")
addr <- read.csv('ADDR.csv', header = T, fileEncoding = "euc-kr")
addr
addr <- read.csv('ADDR.csv', header = T, fileEncoding = "euc-kr")
str(addr)
addr
addr <- read.csv(file = 'ADDR.csv', header = T, fileEncoding = "euc-kr")
str(addr)
addr
addr <- read.csv(file = 'ADDR.csv', header = T, fileEncoding = "UTF-8")
str(addr)
addr
addr <- read.csv(file = 'ADDR.csv', header = T, fileEncoding = "CP949", Encoding = "UTF-8")
str(addr)
addr
addr <- read.csv(file = 'ADDR.csv', header = T, fileEncoding = "CP949", Encoding = "UTF-8")
str(addr)
addr
PH <- read.csv('PH.csv', header = T, Encoding = 'UTF-8')
PH
PH <- read.csv('PH.csv', header = T, Encoding = 'UTF-8')
read.csv()
getwd()
setwd("C:/Users/dydeh/4학년2학기/민구")
getwd()
addr <- read.csv(file = 'ADDR.csv', header = T, fileEncoding = "CP949", Encoding = "UTF-8")
addr
PH <- read.csv('PH.csv', header = T, Encoding = 'UTF-8')
PH
read.csv('PH.csv')
read.csv('PH.csv', encoding = 'UTF-8')
PH <- read.csv('PH.csv', encoding = 'UTF-8')
PH %>% head()
PH %>% dim()
addr %>% head()
addr <- read.csv('ADDR.csv', encoding = 'UTF-8')
addr %>% dim()
addr %>% head()
addr <- read.csv('ADDR.csv', encoding = 'UTF-8')
PH %>% dim()
addr %>% head()
addr %>% dim()
addr <- read.csv('ADDR.csv', encoding = 'UTF-8')
addr <- read.csv('ADDR.csv', header = T, encoding = 'UTF-8')
PH %>% head()
addr <- read.csv('ADDR.csv', header = T, encoding = 'UTF-8')
addr <- read.csv('ADDR.csv',  encoding = 'UTF-8')
addr <- read.csv('ADDR.csv',  encoding = 'UTF-8')
PH %>% head()
sqldf('select MONTH from PH')
sqldf('select MONTH from PH group by MONTH')
PH %>% head()
sqldf('select avg(PH) from PH group by MONTH')
sqldf('select from PH')
sqldf('select * from PH')
PH %>% head()
sqldf('select * from PH where YEAR=2013 group by MONTH')
sqldf('select MONTH, PH from PH where YEAR=2013 group by MONTH')
sqldf('select MONTH, sum(PH) from PH where YEAR=2013 group by MONTH')
sqldf('select MONTH, avg(PH) from PH where YEAR=2013 group by MONTH')
sqldf('select MONTH, round(avg(PH),1) from PH where YEAR=2013 group by MONTH')
sqldf('select MONTH, round(avg(PH),2) from PH where YEAR=2013 group by MONTH')
sqldf('select MONTH, round(avg(PH),2) as ph from PH where YEAR=2013 group by MONTH')
sqldf('select MONTH, round(avg(PH),2) as PH from PH where YEAR=2013 group by MONTH')
year2013 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH where YEAR=2013 group by MONTH')
year2013
year2014 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH where YEAR=2014 group by MONTH')
year2015 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH where YEAR=2015 group by MONTH')
year2016 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH where YEAR=2016 group by MONTH')
year2017 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH where YEAR=2017 group by MONTH')
year2018 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH where YEAR=2018 group by MONTH')
year2019 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH where YEAR=2019 group by MONTH')
year2013 %>% head()
year2014 %>% head()
year2015 %>% head()
year2013.isna()
is.na(year2013)
is.na(PH)
sum(is.na(PH))
mean(PH$PH)
mean(PH$X.U.FEFF.WATER_ID)
PH$PH[is.na(PH$PH)] <- mean(PH$PH)
#결측치 개수
sum(is.na(PH))
#결측치 개수
sum(is.na(PH))
PH %>% dim()
PH <- read.csv('PH.csv', encoding = 'UTF-8')
PH %>% dim()
#결측치 포함 행 제거
PH_1 <- na.omit(PH)
PH_1 %>% dim()
year2013 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH_1 where YEAR=2013 group by MONTH')
year2014 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH_1 where YEAR=2014 group by MONTH')
year2015 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH_1 where YEAR=2015 group by MONTH')
year2016 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH_1 where YEAR=2016 group by MONTH')
year2017 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH_1 where YEAR=2017 group by MONTH')
year2018 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH_1 where YEAR=2018 group by MONTH')
year2019 <- sqldf('select MONTH, round(avg(PH),2) as PH from PH_1 where YEAR=2019 group by MONTH')
year2013 %>% head()
year2014 %>% head()
year2015 %>% head()
year2016 %>% head()
year2017 %>% head()
year2018 %>% head()
year2019 %>% head()
barplot(year2013)
barplot(year2013,PH)
barplot(MONTH, PH)
barplot(year2013, MONTH, PH)
barplot(year2013)
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_bar(stat="identity")
ggplot(year2013, aes(x=MONTH, y=PH, ylim = c(4,8))) + geom_bar(stat="identity")
ggplot(year2013, aes(x=MONTH, y=PH), ylim = c(4,8)) + geom_bar(stat="identity")
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_bar(stat="identity")
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line((stat="identity")))
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2015, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line() + ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line()
year2013
install.packages(c("neuralnet", "NeuralNetTools", "ROCR"))
library("dplyr")
library("data.table")
library("caret")
library("ROCR")
library("neuralnet")
# 위 인공신경망 모델에서 각 변수의 중요도 확인
library("NeuralNetTools")
data.file <- "https://raw.githubusercontent.com/adriangasinski/datahacking_0001/master/german_credit.csv"
cd C:/Users/dydeh/4학년2학기/DM
cd : C:/Users/dydeh/4학년2학기/DM
setwd('C:/Users/dydeh/4학년2학기/DM')
getwd()
write.csv(data.raw, "german_credit.csv", row.names=F)
data.raw <- fread(data.file, stringsAsFactors=T) # stringsAsFactors : 문자열 그대로 읽어오기
write.csv(data.raw, "german_credit.csv", row.names=F)
data.file <- "https://raw.githubusercontent.com/adriangasinski/datahacking_0001/master/german_credit.csv"
data.raw <- fread(data.file, stringsAsFactors=T) # stringsAsFactors : 문자열 그대로 읽어오기
write.csv(data.raw, "german_credit.csv", row.names=F)
data.file <- "https://raw.githubusercontent.com/adriangasinski/datahacking_0001/master/german_credit.csv"
data.raw <- fread(data.file, stringsAsFactors=T) # stringsAsFactors : 문자열 그대로 읽어오기
# stringsAsFactors : 문자열 그대로 읽어오기
data.raw <- fread(data.file, stringsAsFactors=T)
# install.packages("dplyr")
# install.packages("data.table")
# install.packages("caret")
# install.packages("ROCR")
# install.packages("neuralnet")
# install.packages("NeuralNetTools")
install.packages('curl')
library("curl")
# stringsAsFactors : 문자열 그대로 읽어오기
data.raw <- fread(data.file, stringsAsFactors=T)
data.file <- "https://raw.githubusercontent.com/adriangasinski/datahacking_0001/master/german_credit.csv"
# stringsAsFactors : 문자열 그대로 읽어오기
data.raw <- fread(data.file, stringsAsFactors=T)
write.csv(data.raw, "german_credit.csv", row.names=F)
data.raw %>% dim()
data.raw %>% head()
### 숫자로 변환
data.use <- data.raw %>% sapply(as.numeric)
data.use %>% head()
### 데이터 분할
inTrain <- createDataPartition(y=data.use[,"default"], p=0.6, list=FALSE)  # 학습,테스트데이터 나누기
data.train <- data.use[inTrain,]
data.test <- data.use[-inTrain,]
### 볌위 [0, 1] 조정
data.train.pp <- data.train %>% preProcess(method="range")
data.train <- predict(data.train.pp, data.train)
data.test <- predict(data.train.pp, data.test)
### 모델링
nnet.model.1 <- neuralnet(default~., data=data.train, hidden=5, threshold=0.01)
nnet.model.2 <- neuralnet(default~., data=data.train, hidden=c(2,2),  threshold=0.01)
### 신경망 구조 다이어그램: 해석하지 않음
plot(nnet.model.1)
### 변수 중요도
garson(nnet.model.1) + coord_flip()
plot(nnet.model.2)
# Garsons algorithm not applicable for multiple hidden layers
garson(nnet.model.2)
### prediction - nnet.model.1
nnet.1.pred.prob <- compute(nnet.model.1, covariate=data.test)$net.result[,1]
nnet.1.pred <- ifelse(nnet.1.pred.prob > 0.5, 1, 0)
tb <- table(nnet.1.pred, data.test[,"default"])
confusionMatrix(tb)
### prediction - nnet.model.2
nnet.2.pred.prob <- compute(nnet.model.2, covariate=data.test)$net.result[,1]
nnet.2.pred <- ifelse(nnet.2.pred.prob > 0.5, 1, 0)
tb <- table(nnet.2.pred, data.test[,"default"])
confusionMatrix(tb)
### Model Comparison
## ROC curve (Receiver Operating Characteristic curve) - nnet.model.1
nnet.1.pred <- ROCR::prediction(nnet.1.pred.prob, data.test[,"default"])
nnet.model.1.roc <- performance(nnet.1.pred, "tpr", "fpr")
## ROC curve - nnet.model.2
nnet.2.pred <- ROCR::prediction(nnet.2.pred.prob, data.test[,"default"])
nnet.model.2.roc <- performance(nnet.2.pred, "tpr", "fpr")
## ROC curve plot
plot(nnet.model.1.roc, col="red")
plot(nnet.model.2.roc, col="green", add=T)
abline(0,1)
## AUC - the Area Under a ROC Curve
performance(nnet.1.pred, "auc")
performance(nnet.2.pred, "auc")
confusionMatrix(tb)
# Garsons algorithm not applicable for multiple hidden layers
garson(nnet.model.2)
### prediction - nnet.model.1
nnet.1.pred.prob <- compute(nnet.model.1, covariate=data.test)$net.result[,1]
nnet.1.pred <- ifelse(nnet.1.pred.prob > 0.5, 1, 0)
tb <- table(nnet.1.pred, data.test[,"default"])
confusionMatrix(tb)
nnet.1.pred.prob
nnet.1.pred
confusionMatrix(tb)
# install.packages("dplyr")
# install.packages("data.table")
install.packages("caret")
library("caret")
confusionMatrix(tb)
# install.packages("dplyr")
# install.packages("data.table")
# install.packages("caret")
# install.packages("ROCR")
# install.packages("neuralnet")
# install.packages("NeuralNetTools")
#install.packages('curl')
install.packages('e1071', dependencies=TRUE)
library("e1071")
confusionMatrix(tb)
tb
### Model Comparison
## ROC curve (Receiver Operating Characteristic curve) - nnet.model.1
nnet.1.pred <- ROCR::prediction(nnet.1.pred.prob, data.test[,"default"])
nnet.model.1.roc <- performance(nnet.1.pred, "tpr", "fpr")
## ROC curve plot
plot(nnet.model.1.roc, col="red")
plot(nnet.model.2.roc, col="green", add=T)
abline(0,1)
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line(col='red')
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line(col='geen')
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line(col='green')
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line(col='red')
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line(col='green', add = T)
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line(col='red')
par(mfrow = c(2, 2))
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line(col='red')
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line()
par(mfrow = c(2, 2))
opa <- rpar(mfrow = c(2, 2))
opa <- par(mfrow = c(2, 2))
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line(col='red')
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2015, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2016, aes(x=MONTH, y=PH)) + geom_line()
par(opar)
opar <- par(mfrow = c(2, 2))
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line(col='red')
ggplot(year2014, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2015, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2016, aes(x=MONTH, y=PH)) + geom_line()
par(opar)
par(opar)
par(opar)
ggplot(year2019, aes(x=MONTH, y=PH)) + geom_line()
par(opar)
par(mfrow = c(2, 2))
plot(year2013)
year2013
plot(year2013, title='d')
>plot
?plot
plot(year2013, sub='d')
plot(year2013, sub='2013년')
plot(year2013, sub='2013년')
plot(year2013, sub='2013년')
par(mfrow = c(3, 3))
plot(year2013, sub='2013년')
plot(year2014, sub='2014년')
plot(year2015, sub='2015년')
plot(year2016, sub='2016년')
plot(year2017, sub='2016년')
plot(year2018, sub='2016년')
plot(year2019, sub='2016년')
plot(year2019, sub='2019년')
plot(year2019, sub='2019년')
par(mfrow = c(2, 3))
plot(year2014, sub='2014년')
plot(year2015, sub='2015년')
plot(year2016, sub='2016년')
plot(year2017, sub='2017년')
plot(year2018, sub='2018년')
plot(year2019, sub='2019년')
ggplot(year2019, aes(x=MONTH, y=PH)) + geom_line()
ggplot(year2018, aes(x=MONTH, y=PH)) + geom_line()
par(mfrow = c(2, 3))
ggplot(year2013, aes(x=MONTH, y=PH)) + geom_line(col='red')
PH_1 %>% dim()
